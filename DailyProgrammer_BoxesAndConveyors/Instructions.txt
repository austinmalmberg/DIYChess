https://www.reddit.com/r/dailyprogrammer/comments/81aexf/weekly_28_mini_challenges/dv3xyny/

[Boxes and Conveyors] - You will be given a two-line diagram representing a series of boxes, #, conveyors, >, and pits _ that looks like this:

###
>>>_>>>F
A box on a conveyor will take 1 timestep to move 1 place to the right. Gravity is applied instantly. Therefore, the next timestep for the diagram above would look like this:

 ##
>>>#>>>F
Boxes resting on top of boxes will not move until another box collides with it from behind. A box can shove all the boxes in front of it in this manner. There will always be enough boxes so that a box can reach F. (If n is the number of pits, there needs to be greater than 2n boxes.)

Here's how collisions should be handled. Timestep 0:

 ###
>>##>>
Timestep 1:

  ###
>>##>>
Timestep 2:

  ## #
>>##>>
Output: Assuming the input diagram represents timestep 0, print the earliest timestep during which a box is on the F.

Special: This challenge is not about IO. Feel free to hardcode the input, pass it in as two separate strings, or whatever you want to keep it easy.

Challenge input:

#
>>>>>F

       # ## # # #  #
>>>>>>>>>>>>>>>>>__>>_F

#########
>>>>>>>>>_>>__>_>F